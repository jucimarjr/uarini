-class(pipeskeleton).
-compile(export_all).
-constructor([new/1]).

%%this code intended to replicat the behaviour of the Skeleton Pipe
%%by receiveng a data [a number X] creating linked chain of X processes and produce the final result
%%the sum of a number + the number of processes
methods. %%--------------------------------------------------------------------

	new(N) ->
		register(masterpipe,spawn(pipeskeleton,start_slaves,[0,N,[]])).

	stop() -> masterpipe ! stop.

	soma(X) -> masterpipe ! {start,X}. 

class_methods. %%--------------------------------------------------------------

	stop_All(Slaves) ->
	  lists:foreach(fun({Slave,_}) -> Slave ! die end, Slaves).

	start_slaves(_,0,Slaves) ->
		io:format("master:got the slaves  ~n"),
		process_flag(trap_exit, true), 
		master(Slaves);
	start_slaves(I,1,Slaves) ->
		Name = list_to_atom(lists:flatten(io_lib:format("slave~p", [I]))),
		register(Name,spawn_link(pipeslave, slave,[Name,last])),
		start_slaves(I+1,0,[{Name,last} | Slaves]);
	start_slaves(I,N,Slaves) ->
		Name = list_to_atom(lists:flatten(io_lib:format("slave~p", [I]))),
		Next = list_to_atom(lists:flatten(io_lib:format("slave~p", [I+1]))),
		register(Name,spawn_link(pipeslave, slave,[Name,Next])),
		start_slaves(I+1,N-1,[{Name,Next} | Slaves]).

	%%to keep the list of slaves is a matter of safety
	master(Slaves) ->
		receive
			stop -> stop_All(Slaves);
			{'EXIT',_ , {N,Next}} ->
				io:format("master:restarting dead slave ~w.~n",[N]),
				Slave = spawn_link(pipeslave, slave,[N,Next]),
				master(lists:keyreplace(N,1,Slaves,{N,Slave}));
			{start,Msg} -> 
				slave0 ! Msg,
		   	master(Slaves)
	  end.

		
