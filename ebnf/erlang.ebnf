form ::= (atribute | function | rule) '.'

attribute ::=
    '-'
          ( atom
               ( attr_val
               | typed_attr_val
               | '(' typed_attr_val ')'))
         |('spec'|'callback') type_spec

type_spec ::= spec_fun type_sigs | '(' spec_fun type_sigs ')'

spec_fun ::= atom ( |':' atom ( |'/' integer) | '/' integer)

typed_attr_val ::= expr (',' typed_record_fields | '::' top_type)

typed_record_fields ::= '{' typed_exprs '}'

typed_exprs ::= (typed_expr ( | ',' (typed_exprs | exprs))) | expr ',' typed_exprs

typed_expr ::= expr '::' top_type

type_sigs ::= type_sig ( | ';' type_sigs)

type_sig ::= fun_type ( | 'when' type_guards)

type_guards ::= type_guard ( | ',' type_guards)

type_guard ::= atom '(' top_type ')' | var '::' top_type

top_types ::= top_type ( | ',' top_types)

top_type ::= top_type_100

top_type_100 ::= type_200 (| '|' top_type_100)

type_200 ::= type_300 ('..' type_300 | )

type_300 ::= (type_300 add_op | ) type_400

type_400 ::= (type_400 mult_op | ) type_500

type_500 ::= (prefix_op | ) type

type ::= var
    | atom ( | ( | ':' atom )'(' ( | top_types) ')' )
    | '[' ( | top_type ( | ',' '...')) ']'
    | '{' ( | top_types ) '}'
    | '#' atom '{' ( | filed_types) '}'
    | binary_type
    | integer
    | 'fun' '(' ( | fun_type_100) ')'

fun_type_100 ::= ( '(' '...' ')' '->' top_type | fun_type )

fun_type ::= '(' ( | top_types ) ')' '->' top_type

filed_types ::= field_type ( | ',' filed_types)

filed_type ::= atom '::' top_type

binary_type ::=
     '<<' (
          | bin_base_type ( | ',' bin_unit_type )
          | bin_unit_type )
     '>>'

bin_base_type ::= var ':' type

bin_unit_type ::= var ':' var '*' type

attr_val ::= expr ( | ',' exprs)  | '(' expr ( | ',' exprs) ')'

function ::= function_clauses

function_clauses ::= function_clause ( | function_clauses )

function_clause ::= atom clause_args clause_guard clause_body

clause_args ::= argument_list

clause_guard ::= '' | 'when' guard

clause_body ::= '->' exprs

expr ::= 'catch' expr | expr_100

expr_100 ::= expr_150 ( ('='|'!') expr_100 | )

expr_150 ::= expr_160 ('orelse' | )

expr_160 ::= expr_200 ('andalso' | )

expr_200 ::= expr_300 (comp_op expr_300 | )

expr_300 ::= expr_400 (list_op expr_300 | )

expr_400 ::= (expr_400 add_op | ) expr_500

expr_500 ::= (expr_500 mult_op | )expr_600

expr_600 ::= (prefix_op | ) expr_700

expr_700 ::= function_call | record_expr | expr_800

expr_800 ::= expr_900 (':' expr_max | )

expr_900 ::= ( | expr_900) '.' atom | expr_max

expr_max ::= var
               | atomic
               | list
               | binary
               | list_compreehension
               | binary_comprehension
               | tuple
               | '(' expr ')'
               | 'begin' exprs 'end'
               | if_expr
               | case_expr
               | fun_expr
               | try_expr
               | query_expr
              
list ::= '[' (']' | expr tail)

tail ::= ( | '|' expr) ']' | ',' expr tail

binary ::= '<<' ( | bin_elements) '>>'

bin_elements ::= bin_element ( | ',' bin_elements)

bin_element ::= bit_expr opt_bit_size_expr opt_bit_type_list

bit_expr ::= (prefix_op| ) expr_max

opt_bit_size_expr ::= ':' bit_size_expr | ''

opt_bit_type_list ::= '/' bit_type_list | ''

bit_type_list ::= bit_type ('-' bit_type_list | )

bit_type ::= atom ( | ':' integer)

bit_size_expr ::= expr_max

list_comprehension ::= '[' expr '||' lc_exprs ']'

binary_comprehension ::= '<<' binary '||' lc_exprs '>>'

lc_exprs ::= lc_expr ( | ',' lc_exprs)

lc_expr ::= ( | expr '<-' |) | binary '<=' expr

tuple ::= '{' ( | expr) '}'

record_expr ::= ( | expr_max | record_expr) '#' atom ('.' atom | record_tuple)

record_tuple ::= '{' ( | record_fields) '}'

record_fields ::= record_field ( | ',' record_fields)

record_field ::= (var | atom) '=' expr

function_call ::= expr_800 argument_list

if_expr ::= 'if' if_clauses 'end'

if_clauses ::= if_clause ( | ';' if_clause)

if_clause ::= guard clause_body

case_expr ::= 'case' expr 'of' cr_clauses 'end'

cr_clauses ::= cr_clause ( | ';' cr_clause)

cr_clause ::= expr clause_guard clause_body

receive_expr ::= 'receive' (cr_clauses|(cr_clauses | ) 'after' expr clause_body) 'end'

fun_expr ::= 'fun' (atom '/' integer | atom_or_var ':' atom_or_var '/' integer_or_var | fun_clauses)

atom_or_var ::= atom | var

integer_or_var ::= integer | var

fun_clauses ::= fun_clause ( | ';' fun_clauses)

fun_clause ::= argument_list clause_guard clause_body

try_expr ::= 'try' exprs ('of' cr_clauses | ) try_catch

try_catch ::= ('catch' try_clauses  'after' exprs | 'catch' try_clauses | 'after' exprs ) 'end'

try_clause ::= ( | (atom | var) ':') expr clause_guard clause_body

query_expr ::= 'query' list_comprehension 'end'

argument_list ::= '(' ( |exprs) ')'

exprs ::= expr ( |',' exprs)

guard ::= exprs ( |';' guard)

atomic ::= char|integer|float|atom|strings

strings ::= string ( | strings)

prefix_op ::= '+'|'-'|'bnot'|'not'

mult_op ::= '/'|'*'|'div'|'rem'|'band'|'and'

add_op ::= '+'|'-'|'bor'|'bxor'|'bsl'|'bsr'|'or'|'xor'

list_op ::= '++'|'--'

comp ::= '=='|'/='|'=<'|'<'|'>='|'>'|'=:='|'=/='

rule ::= rule_clauses

rule_clauses ::= rule_clause ( |';' rule_clauses)

rule_clause ::= atom clause_args clause_guard rule_body

rule_body ::= ':-' lc_exprs
